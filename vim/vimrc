" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" let Vundle manage Vundle, required
Bundle "gmarik/Vundle.vim"
" Git wrapper
Bundle "tpope/vim-fugitive"
" Track the engine. (UltiSnips)
Bundle "SirVer/ultisnips"
" Set of snippets
Bundle "honza/vim-snippets"
" " YouCompleteMe
" Bundle "Valloric/YouCompleteMe"
" Vim status line
Bundle "bling/vim-airline"
" Bookmarks
Bundle "MattesGroeger/vim-bookmarks"
" Nerd Tree
Bundle "scrooloose/nerdtree"
" Fuzzy search
Bundle "haya14busa/incsearch.vim"
Bundle "haya14busa/incsearch-fuzzy.vim"
" Auto brackets "
Bundle "Raimondi/delimitMate"
" Autocompletion for javascript
Bundle "marijnh/tern_for_vim"
" tcomment_vim
Bundle "tomtom/tcomment_vim"
" java 8 support
Bundle "vim-jp/vim-java"
" Vim tmux plugin
Bundle "tmux-plugins/vim-tmux"
" LaTeX support for vim
Bundle "lervag/vimtex"
" Unite
Bundle "Shougo/unite.vim"
" vimproc
Bundle "Shougo/vimproc.vim"
" Unite plugin for most recently used files
Bundle "Shougo/neomru.vim"
" Devicons
Bundle "ryanoasis/vim-devicons"
" JSX support for vim
Bundle "mxw/vim-jsx"
" Asynchronous syntax checker
Bundle "benekastah/neomake"
" Visualize undo tree
Bundle "simnalamburt/vim-mundo"
" Support to javascript libraries
Bundle "othree/javascript-libraries-syntax.vim"
" Highlight JSON syntax
Bundle "elzr/vim-json"
" Adaptation of one-light and one-dark colorschemes for Vim
" Bundle "joshdick/onedark.vim"
" React snippets
Bundle "justinj/vim-react-snippets"
" Quoting/Parenthesizing made simple
Bundle "Konfekt/FastFold"
" A simple alignment operator for Vim text editor
Bundle "tommcdo/vim-lion"
" Run your tests at the speed of thought
Bundle "janko-m/vim-test"
" Vim/Ruby Configuration Files
Bundle "vim-ruby/vim-ruby"
" Dark powered asynchronous completion framework for neovim/Vim8
Bundle "Shougo/deoplete.nvim"
" deoplete.nvim source for javascript
Bundle "carlitux/deoplete-ternjs"
" Deoplete sources for ruby language
Bundle "fishbullet/deoplete-ruby"
" deoplete.nvim source for Ruby with solargraph.
Bundle "uplus/deoplete-solargraph"
" Run Rspec specs from Vim
Bundle "thoughtbot/vim-rspec"
" Refactoring tool for Ruby in vim!
Bundle "ecomba/vim-ruby-refactoring"
" extended % matching for HTML, LaTeX, and many other languages
Bundle "vim-scripts/matchit.zip"
" one colorscheme pack to rule them all!
Bundle "flazz/vim-colorschemes"
" Vim plugin for the Perl module / CLI script 'ack'
Bundle "mileszs/ack.vim"

call vundle#end()
filetype plugin indent on     " required
"
"================
"GENERAL SETTINGS
"================
"
set textwidth=130
set showbreak=\ \
inoremap {<CR> {<CR>}<C-o>O
set nocompatible              " be iMproved, required
filetype off                  " required
set mouse=a
inoremap jj <esc>
nnoremap <leader>h :nohlsearch<CR>
command! Ind execute "normal gg=G"
set list
set listchars=tab:▸\ ,eol:¬
syntax on

set number
set relativenumber

set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set smarttab
set foldmethod=syntax
set backspace=indent,eol,start
set textwidth=90
set colorcolumn=+1

set wildmenu

" Search options

set hlsearch
set incsearch
set ignorecase

if has('nvim')
    set inccommand=split
endif

" Spelling

set nospell
set spelllang=en
set spellsuggest=5

set termguicolors
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
let g:onedark_termcolors = 256
let g:airline_left_sep="›"  " Slightly fancier than ">"
let g:airline_right_sep="‹" " Slightly fancier than "<"
let g:airline_powerline_fonts = 1
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

colo Tomorrow-Night
set background=dark


hi MatchParen ctermbg=red guibg=lightblue
highlight Pmenu ctermbg=7 ctermfg=0
highlight PmenuSel ctermfg=0 ctermbg=7
set laststatus=2

set nofoldenable    " disable folding
"React support
let g:jsx_ext_required = 1
let g:javascript_enable_domhtmlcss = 1

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

"
"=============
"DEOPLETE
"=============
"
" Use deoplete
let g:deoplete#enable_at_startup = 1
if !exists('g:deoplete#omni#input_patterns')
  let g:deoplete#omni#input_patterns = {}
endif
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
" deoplete tab-complete
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" tern
if exists('g:plugs["tern_for_vim"]')
  " let g:tern_show_argument_hints = 'on_hold'
  " let g:tern_show_signature_in_pum = 1
  autocmd FileType javascript setlocal omnifunc=tern#Complete
endif
" tern
autocmd FileType javascript nnoremap <silent> <buffer> gb :TernDef<CR>
"
"=========
"ULTISNIPS
"=========
"
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger = "<c-w>"
let g:UltiSnipsListSnippets = "<c-l>"
let g:UltiSnipsJumpForwardTrigger = "<c-b>"
let g:UltiSnipsJumpBackwardTrigger = "<c-z>"
let g:UltiSnipsListSnippets = "<c-v>"
let g:UltiSnipsUsePythonVersion=2
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
"
"=======
"NEOMAKE
"=======
"
" let g:neomake_open_list = 2
let g:neomake_javascript_enabled_makers = ["eslint"]
let g:neomake_typescript_enabled_makers = ["tslint"]
" Disable Neomake for C files, there is YCM already
let g:neomake_c_enabled_makers = []
" call neomake#configure#automake('w')
"
"=====
"UNITE
"=====
"
"Unite configuration
let g:unite_source_grep_max_candidates = 200
" set up coolguy arrow prompt
let g:unite_prompt = "➜ "
nnoremap <leader>p :Unite -start-insert file_rec/async <CR>
nnoremap <Leader>f :Unite file<CR>
nnoremap <Leader>b :Unite buffer<CR>
nnoremap <Leader>g :Unite grep:. <CR>
nnoremap <Leader>L :Unite -start-insert line<CR>
nnoremap <Leader>q :Unite -buffer-name=mru file_mru<CR>
"
"=====
"RSPEC
"=====
"
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
let g:rspec_runner = "os_x_iterm2"
"
"=================
"RUBY REFACTORING
"=================
"
:nnoremap <leader>rap  :RAddParameter<cr>
:nnoremap <leader>rcpc :RConvertPostConditional<cr>
:nnoremap <leader>rel  :RExtractLet<cr>
:vnoremap <leader>rec  :RExtractConstant<cr>
:vnoremap <leader>relv :RExtractLocalVariable<cr>
:nnoremap <leader>rit  :RInlineTemp<cr>
:vnoremap <leader>rl   :RRenameLocalVariable<cr>
:vnoremap <leader>rv   :RRenameInstanceVariable<cr>
:vnoremap <leader>rem  :RExtractMethod<cr>
"
"========
"MAPPINGS
"========
"
" Fast saving
nmap <leader>w :w!<cr>
" nerd tree mapping
map <C-n> :NERDTreeToggle<CR>
" Java mappings
nmap <C-O> :JavaImportOrganize<CR>
nmap <C-U> :MundoToggle<CR>
" inchsearch mappings
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map z/ <Plug>(incsearch-fuzzy-/)
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)

"
"============
"AUTOCOMMANDS
"============
"
" omnifuncs
augroup omnifuncs
  autocmd!
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
augroup end

autocmd BufRead,BufNewFile *.java UltiSnipsAddFiletypes java
autocmd BufRead,BufNewFile *.js UltiSnipsAddFiletypes javascript
autocmd BufRead,BufNewFile *.cpp UltiSnipsAddFiletypes cpp
autocmd BufRead,BufNewFile *.tex set filetype=tex
autocmd BufRead,BufNewFile *.js set shiftwidth=2
autocmd BufRead,BufNewFile *.ts set shiftwidth=2
autocmd BufRead,BufNewFile *.rb set shiftwidth=2
autocmd BufRead,BufNewFile *.html set shiftwidth=2
" Remove trailing whitespaces when saving files
autocmd BufWritePre * %s/\s\+$//e
