set nocompatible              " be iMproved, required
filetype off                  " required
set mouse=a
inoremap jj <esc> 
nnoremap <leader>h :nohlsearch<CR> 
command! Ind execute "normal gg=G"
"
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" let Vundle manage Vundle, required
Bundle 'gmarik/Vundle.vim'
" Git wrapper  
Bundle 'tpope/vim-fugitive'
" Track the engine. (UltiSnips)
Bundle 'SirVer/ultisnips'
" Set of snippets 
Bundle 'honza/vim-snippets'
" YouCompleteMe
Bundle 'Valloric/YouCompleteMe'
" Vim status line
Bundle 'bling/vim-airline'
" Swift syntax highlight
Bundle 'Keithbsmiley/swift.vim'
" Bookmarks
Bundle 'MattesGroeger/vim-bookmarks'
" Nerd Tree
Bundle 'scrooloose/nerdtree'
" Fuzzy search
Bundle "haya14busa/incsearch.vim"
Bundle "haya14busa/incsearch-fuzzy.vim"
" Auto brackets "
Bundle 'Raimondi/delimitMate'
" Autocompletion for javascript 
Bundle 'marijnh/tern_for_vim'
" tcomment_vim 
Bundle 'tomtom/tcomment_vim'
" java 8 support 
Bundle 'vim-jp/vim-java'
" highlights syntax for jade file 
Bundle 'digitaltoad/vim-jade'
" displays indention level 
Bundle 'Yggdroot/indentLine'
" Vim tmux plugin 
Bundle 'tmux-plugins/vim-tmux'
" LaTeX support for vim 
Bundle "lervag/vimtex"
" Elixir support for vim 
Bundle "elixir-lang/vim-elixir" 
" Assembly syntax highlights for vim
Bundle "gcollura/vim-masm"
" Unite 
Bundle "Shougo/unite.vim"
" vimproc 
Bundle "Shougo/vimproc.vim" 
" Unite plugin for most recently used files 
Bundle "Shougo/neomru.vim"
" Devicons 
Bundle "ryanoasis/vim-devicons"
" JSX support for vim 
Bundle 'mxw/vim-jsx'
" Asynchronous syntax checker 
Bundle 'benekastah/neomake'
" Visualize undo tree  
Bundle 'simnalamburt/vim-mundo'
" Support to javascript libraries 
Bundle 'othree/javascript-libraries-syntax.vim'
" Highlight JSON syntax 
Bundle 'elzr/vim-json'
" Onedark theme 
Bundle 'joshdick/onedark.vim'
" Onedark theme airline 
Bundle 'joshdick/airline-onedark.vim'
" React snippets
Bundle "justinj/vim-react-snippets"

autocmd FileType tex setl wrap linebreak textwidth=0 
if has('patch-7.4.338')
    set breakindent
endif
set showbreak=\ \
call vundle#end()
filetype plugin indent on     " required

inoremap {<CR> {<CR>}<C-o>O 

" |        YOUCOMPLETEME            |
"
"support for C-type languages (YCM)
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py' 
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_key_invoke_completation= '<C-Space>' 
let g:ycm_complete_in_comments = 1
let g:ycm_confirm_extra_conf = 0
let g:EclimCompletionMethod = 'omnifunc'
"let g:ycm_path_to_python_interpreter = '/usr/bin/python2.7'

" |           ULTISNIPS             |
"
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger = "<c-w>"
let g:UltiSnipsListSnippets = "<c-l>"
let g:UltiSnipsJumpForwardTrigger = "<c-b>"
let g:UltiSnipsJumpBackwardTrigger = "<c-z>"
let g:UltiSnipsListSnippets = "<c-v>"
let g:UltiSnipsUsePythonVersion=2
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" |            NEOMAKE             |

let g:neomake_open_list = 2

" let g:neomake_javascript_jscs_maker = {
"     \ 'exe': 'jscs',
"     \ 'args': ['--no-color', '--preset', 'airbnb', '--reporter', 'inline', '--esnext'],
"     \ 'errorformat': '%f: line %l\, col %c\, %m',
"     \ }
let g:neomake_javascript_enabled_makers = ['jshint', 'eslint']
" Disable Neomake for C files, there is YCM already 
let g:neomake_c_enabled_makers = []

"Unite configuration 
let g:unite_source_grep_max_candidates = 200
" set up coolguy arrow prompt
let g:unite_prompt = 'âžœ '
nnoremap <leader>p :Unite -start-insert file_rec/async <CR>
nnoremap <Leader>f :Unite file<CR>
nnoremap <Leader>b :Unite buffer<CR>
nnoremap <Leader>g :Unite grep:. <CR> 
nnoremap <Leader>L :Unite -start-insert line<CR>
nnoremap <Leader>q :Unite -buffer-name=mru file_mru<CR> 

syntax on

set number 
set relativenumber 

set autoindent 
set smartindent 
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab 
set smarttab 

set backspace=indent,eol,start

set wildmenu

"search options
set hlsearch 
set incsearch
set ignorecase 

set encoding=utf-8
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
let g:onedark_termcolors = 256 
let g:airline_theme='onedark' 
colorscheme onedark 

hi MatchParen ctermbg=red guibg=lightblue
set laststatus=2

" |            MAPPINGS             |
"      
" Fast saving 
nmap <leader>w :w!<cr>

"nerd tree mapping 
map <C-n> :NERDTreeToggle<CR>

"java import mapping 
nmap <C-O> :JavaImportOrganize<CR>
nmap <C-U> :MundoToggle<CR>

"inchsearch mapping 
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

map z/ <Plug>(incsearch-fuzzy-/) 
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)

let g:airline_powerline_fonts = 1
let g:tex_fold_enabled=0

"React support 
let g:jsx_ext_required = 1
let g:javascript_enable_domhtmlcss = 1
" let g:used_javascript_libs = 'react,flux'

autocmd BufRead,BufNewFile *.java UltiSnipsAddFiletypes java
autocmd BufRead,BufNewFile *.js UltiSnipsAddFiletypes javascript
autocmd BufRead,BufNewFile *.cpp UltiSnipsAddFiletypes cpp
autocmd BufNewFile,BufReadPost *.jade set filetype=jade
autocmd BufNewFile,BufRead *.swift setfiletype swift
autocmd! BufWritePost,BufEnter *.js Neomake

au BufRead,BufNewFile *.asm set filetype=masm
au BufRead,BufNewFile *.ex,*.exs set filetype=elixir
au BufRead,BufNewFile *.eex set filetype=eelixir

autocmd BufRead,BufNewFile *.js set shiftwidth=2
autocmd BufRead,BufNewFile *.html set shiftwidth=2
